// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class playerTeam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save playerTeam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type playerTeam must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("playerTeam", id.toString(), this);
    }
  }

  static load(id: string): playerTeam | null {
    return changetype<playerTeam | null>(store.get("playerTeam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get team(): string {
    let value = this.get("team");
    return value!.toString();
  }

  set team(value: string) {
    this.set("team", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    return value!.toString();
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get team(): Array<string> {
    let value = this.get("team");
    return value!.toStringArray();
  }

  set team(value: Array<string>) {
    this.set("team", Value.fromStringArray(value));
  }
}

export class Team extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Team entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Team must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Team", id.toString(), this);
    }
  }

  static load(id: string): Team | null {
    return changetype<Team | null>(store.get("Team", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get teamID(): BigInt {
    let value = this.get("teamID");
    return value!.toBigInt();
  }

  set teamID(value: BigInt) {
    this.set("teamID", Value.fromBigInt(value));
  }

  get leader(): string {
    let value = this.get("leader");
    return value!.toString();
  }

  set leader(value: string) {
    this.set("leader", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get tournaments(): Array<string> | null {
    let value = this.get("tournaments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tournaments(value: Array<string> | null) {
    if (!value) {
      this.unset("tournaments");
    } else {
      this.set("tournaments", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Tournament extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tournament entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tournament must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tournament", id.toString(), this);
    }
  }

  static load(id: string): Tournament | null {
    return changetype<Tournament | null>(store.get("Tournament", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get organizer(): string {
    let value = this.get("organizer");
    return value!.toString();
  }

  set organizer(value: string) {
    this.set("organizer", Value.fromString(value));
  }

  get totalPrize(): BigInt {
    let value = this.get("totalPrize");
    return value!.toBigInt();
  }

  set totalPrize(value: BigInt) {
    this.set("totalPrize", Value.fromBigInt(value));
  }

  get participantPrize(): BigInt {
    let value = this.get("participantPrize");
    return value!.toBigInt();
  }

  set participantPrize(value: BigInt) {
    this.set("participantPrize", Value.fromBigInt(value));
  }

  get viewerPool(): BigInt {
    let value = this.get("viewerPool");
    return value!.toBigInt();
  }

  set viewerPool(value: BigInt) {
    this.set("viewerPool", Value.fromBigInt(value));
  }

  get teamSizeLimit(): i32 {
    let value = this.get("teamSizeLimit");
    return value!.toI32();
  }

  set teamSizeLimit(value: i32) {
    this.set("teamSizeLimit", Value.fromI32(value));
  }

  get maxParticipants(): BigInt {
    let value = this.get("maxParticipants");
    return value!.toBigInt();
  }

  set maxParticipants(value: BigInt) {
    this.set("maxParticipants", Value.fromBigInt(value));
  }

  get organizerAddress(): string {
    let value = this.get("organizerAddress");
    return value!.toString();
  }

  set organizerAddress(value: string) {
    this.set("organizerAddress", Value.fromString(value));
  }

  get matchMakingModule(): string {
    let value = this.get("matchMakingModule");
    return value!.toString();
  }

  set matchMakingModule(value: string) {
    this.set("matchMakingModule", Value.fromString(value));
  }

  get teams(): Array<string> | null {
    let value = this.get("teams");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set teams(value: Array<string> | null) {
    if (!value) {
      this.unset("teams");
    } else {
      this.set("teams", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class participantTeam extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save participantTeam entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type participantTeam must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("participantTeam", id.toString(), this);
    }
  }

  static load(id: string): participantTeam | null {
    return changetype<participantTeam | null>(store.get("participantTeam", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get team(): string {
    let value = this.get("team");
    return value!.toString();
  }

  set team(value: string) {
    this.set("team", Value.fromString(value));
  }

  get tournament(): string {
    let value = this.get("tournament");
    return value!.toString();
  }

  set tournament(value: string) {
    this.set("tournament", Value.fromString(value));
  }
}

export class Match extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Match entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Match must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Match", id.toString(), this);
    }
  }

  static load(id: string): Match | null {
    return changetype<Match | null>(store.get("Match", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tournamentId(): BigInt {
    let value = this.get("tournamentId");
    return value!.toBigInt();
  }

  set tournamentId(value: BigInt) {
    this.set("tournamentId", Value.fromBigInt(value));
  }

  get team1(): BigInt {
    let value = this.get("team1");
    return value!.toBigInt();
  }

  set team1(value: BigInt) {
    this.set("team1", Value.fromBigInt(value));
  }

  get team2(): BigInt {
    let value = this.get("team2");
    return value!.toBigInt();
  }

  set team2(value: BigInt) {
    this.set("team2", Value.fromBigInt(value));
  }

  get round(): BigInt {
    let value = this.get("round");
    return value!.toBigInt();
  }

  set round(value: BigInt) {
    this.set("round", Value.fromBigInt(value));
  }

  get winner(): BigInt | null {
    let value = this.get("winner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winner(value: BigInt | null) {
    if (!value) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromBigInt(<BigInt>value));
    }
  }

  get n_team1(): string {
    let value = this.get("n_team1");
    return value!.toString();
  }

  set n_team1(value: string) {
    this.set("n_team1", Value.fromString(value));
  }

  get n_team2(): string {
    let value = this.get("n_team2");
    return value!.toString();
  }

  set n_team2(value: string) {
    this.set("n_team2", Value.fromString(value));
  }
}

export class EpnsNotificationCounter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EpnsNotificationCounter entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpnsNotificationCounter must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpnsNotificationCounter", id.toString(), this);
    }
  }

  static load(id: string): EpnsNotificationCounter | null {
    return changetype<EpnsNotificationCounter | null>(
      store.get("EpnsNotificationCounter", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    return value!.toBigInt();
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }
}

export class EpnsPushNotification extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpnsPushNotification entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpnsPushNotification must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpnsPushNotification", id.toString(), this);
    }
  }

  static load(id: string): EpnsPushNotification | null {
    return changetype<EpnsPushNotification | null>(
      store.get("EpnsPushNotification", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get notificationNumber(): BigInt {
    let value = this.get("notificationNumber");
    return value!.toBigInt();
  }

  set notificationNumber(value: BigInt) {
    this.set("notificationNumber", Value.fromBigInt(value));
  }

  get recipient(): string {
    let value = this.get("recipient");
    return value!.toString();
  }

  set recipient(value: string) {
    this.set("recipient", Value.fromString(value));
  }

  get notification(): string {
    let value = this.get("notification");
    return value!.toString();
  }

  set notification(value: string) {
    this.set("notification", Value.fromString(value));
  }
}
