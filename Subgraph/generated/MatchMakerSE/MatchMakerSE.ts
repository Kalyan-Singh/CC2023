// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BracketUpdated extends ethereum.Event {
  get params(): BracketUpdated__Params {
    return new BracketUpdated__Params(this);
  }
}

export class BracketUpdated__Params {
  _event: BracketUpdated;

  constructor(event: BracketUpdated) {
    this._event = event;
  }

  get MatchId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get WinnerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get TournamentId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get roundId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MatchMade extends ethereum.Event {
  get params(): MatchMade__Params {
    return new MatchMade__Params(this);
  }
}

export class MatchMade__Params {
  _event: MatchMade;

  constructor(event: MatchMade) {
    this._event = event;
  }

  get MatchId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get team1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get team2(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tournamentId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get rountId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RequestFulfilled extends ethereum.Event {
  get params(): RequestFulfilled__Params {
    return new RequestFulfilled__Params(this);
  }
}

export class RequestFulfilled__Params {
  _event: RequestFulfilled;

  constructor(event: RequestFulfilled) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class RequestSent extends ethereum.Event {
  get params(): RequestSent__Params {
    return new RequestSent__Params(this);
  }
}

export class RequestSent__Params {
  _event: RequestSent;

  constructor(event: RequestSent) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get numWords(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoundStarted extends ethereum.Event {
  get params(): RoundStarted__Params {
    return new RoundStarted__Params(this);
  }
}

export class RoundStarted__Params {
  _event: RoundStarted;

  constructor(event: RoundStarted) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get TournamentId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MatchMakerSE__getMatchesResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get winner(): BigInt {
    return this[1].toBigInt();
  }

  get tournamentId(): BigInt {
    return this[2].toBigInt();
  }

  get roundId(): BigInt {
    return this[3].toBigInt();
  }
}

export class MatchMakerSE__getTournamentRoundMatchesResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get winner(): BigInt {
    return this[1].toBigInt();
  }

  get tournamentId(): BigInt {
    return this[2].toBigInt();
  }

  get roundId(): BigInt {
    return this[3].toBigInt();
  }
}

export class MatchMakerSE__matchesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getWinner(): BigInt {
    return this.value1;
  }

  getTournamentId(): BigInt {
    return this.value2;
  }

  getRoundId(): BigInt {
    return this.value3;
  }
}

export class MatchMakerSE extends ethereum.SmartContract {
  static bind(address: Address): MatchMakerSE {
    return new MatchMakerSE("MatchMakerSE", address);
  }

  TournamentControllerAddress(): Address {
    let result = super.call(
      "TournamentControllerAddress",
      "TournamentControllerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_TournamentControllerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "TournamentControllerAddress",
      "TournamentControllerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getByeTeams(_tid: BigInt): Array<BigInt> {
    let result = super.call("getByeTeams", "getByeTeams(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(_tid)
    ]);

    return result[0].toBigIntArray();
  }

  try_getByeTeams(_tid: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getByeTeams",
      "getByeTeams(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_tid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMatchTeams(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "getMatchTeams",
      "getMatchTeams(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMatchTeams(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMatchTeams",
      "getMatchTeams(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMatches(_mid: BigInt): MatchMakerSE__getMatchesResultValue0Struct {
    let result = super.call(
      "getMatches",
      "getMatches(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_mid)]
    );

    return changetype<MatchMakerSE__getMatchesResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMatches(
    _mid: BigInt
  ): ethereum.CallResult<MatchMakerSE__getMatchesResultValue0Struct> {
    let result = super.tryCall(
      "getMatches",
      "getMatches(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_mid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MatchMakerSE__getMatchesResultValue0Struct>(value[0].toTuple())
    );
  }

  getTournamentRoundMatches(
    _tid: BigInt,
    _rid: BigInt
  ): Array<MatchMakerSE__getTournamentRoundMatchesResultValue0Struct> {
    let result = super.call(
      "getTournamentRoundMatches",
      "getTournamentRoundMatches(uint256,uint256):((uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_tid),
        ethereum.Value.fromUnsignedBigInt(_rid)
      ]
    );

    return result[0].toTupleArray<
      MatchMakerSE__getTournamentRoundMatchesResultValue0Struct
    >();
  }

  try_getTournamentRoundMatches(
    _tid: BigInt,
    _rid: BigInt
  ): ethereum.CallResult<
    Array<MatchMakerSE__getTournamentRoundMatchesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getTournamentRoundMatches",
      "getTournamentRoundMatches(uint256,uint256):((uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_tid),
        ethereum.Value.fromUnsignedBigInt(_rid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MatchMakerSE__getTournamentRoundMatchesResultValue0Struct
      >()
    );
  }

  matches(param0: BigInt): MatchMakerSE__matchesResult {
    let result = super.call(
      "matches",
      "matches(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MatchMakerSE__matchesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_matches(
    param0: BigInt
  ): ethereum.CallResult<MatchMakerSE__matchesResult> {
    let result = super.tryCall(
      "matches",
      "matches(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MatchMakerSE__matchesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  players(param0: BigInt, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "players",
      "players(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_players(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "players",
      "players(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  winners(param0: BigInt, param1: BigInt, param2: BigInt): BigInt {
    let result = super.call(
      "winners",
      "winners(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_winners(
    param0: BigInt,
    param1: BigInt,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "winners",
      "winners(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tournmentControllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _subId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _updateWinnerCall extends ethereum.Call {
  get inputs(): _updateWinnerCall__Inputs {
    return new _updateWinnerCall__Inputs(this);
  }

  get outputs(): _updateWinnerCall__Outputs {
    return new _updateWinnerCall__Outputs(this);
  }
}

export class _updateWinnerCall__Inputs {
  _call: _updateWinnerCall;

  constructor(call: _updateWinnerCall) {
    this._call = call;
  }

  get _mid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _winnerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class _updateWinnerCall__Outputs {
  _call: _updateWinnerCall;

  constructor(call: _updateWinnerCall) {
    this._call = call;
  }
}

export class ChangeTournamentControllerCall extends ethereum.Call {
  get inputs(): ChangeTournamentControllerCall__Inputs {
    return new ChangeTournamentControllerCall__Inputs(this);
  }

  get outputs(): ChangeTournamentControllerCall__Outputs {
    return new ChangeTournamentControllerCall__Outputs(this);
  }
}

export class ChangeTournamentControllerCall__Inputs {
  _call: ChangeTournamentControllerCall;

  constructor(call: ChangeTournamentControllerCall) {
    this._call = call;
  }

  get _tournamentControllerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTournamentControllerCall__Outputs {
  _call: ChangeTournamentControllerCall;

  constructor(call: ChangeTournamentControllerCall) {
    this._call = call;
  }
}

export class MakeMatchesCall extends ethereum.Call {
  get inputs(): MakeMatchesCall__Inputs {
    return new MakeMatchesCall__Inputs(this);
  }

  get outputs(): MakeMatchesCall__Outputs {
    return new MakeMatchesCall__Outputs(this);
  }
}

export class MakeMatchesCall__Inputs {
  _call: MakeMatchesCall;

  constructor(call: MakeMatchesCall) {
    this._call = call;
  }

  get _round(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tid(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakeMatchesCall__Outputs {
  _call: MakeMatchesCall;

  constructor(call: MakeMatchesCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetCallBackGasLimitCall extends ethereum.Call {
  get inputs(): SetCallBackGasLimitCall__Inputs {
    return new SetCallBackGasLimitCall__Inputs(this);
  }

  get outputs(): SetCallBackGasLimitCall__Outputs {
    return new SetCallBackGasLimitCall__Outputs(this);
  }
}

export class SetCallBackGasLimitCall__Inputs {
  _call: SetCallBackGasLimitCall;

  constructor(call: SetCallBackGasLimitCall) {
    this._call = call;
  }

  get _gas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCallBackGasLimitCall__Outputs {
  _call: SetCallBackGasLimitCall;

  constructor(call: SetCallBackGasLimitCall) {
    this._call = call;
  }
}

export class SetKeyHashCall extends ethereum.Call {
  get inputs(): SetKeyHashCall__Inputs {
    return new SetKeyHashCall__Inputs(this);
  }

  get outputs(): SetKeyHashCall__Outputs {
    return new SetKeyHashCall__Outputs(this);
  }
}

export class SetKeyHashCall__Inputs {
  _call: SetKeyHashCall;

  constructor(call: SetKeyHashCall) {
    this._call = call;
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetKeyHashCall__Outputs {
  _call: SetKeyHashCall;

  constructor(call: SetKeyHashCall) {
    this._call = call;
  }
}

export class SetNumWordsCall extends ethereum.Call {
  get inputs(): SetNumWordsCall__Inputs {
    return new SetNumWordsCall__Inputs(this);
  }

  get outputs(): SetNumWordsCall__Outputs {
    return new SetNumWordsCall__Outputs(this);
  }
}

export class SetNumWordsCall__Inputs {
  _call: SetNumWordsCall;

  constructor(call: SetNumWordsCall) {
    this._call = call;
  }

  get _number(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNumWordsCall__Outputs {
  _call: SetNumWordsCall;

  constructor(call: SetNumWordsCall) {
    this._call = call;
  }
}

export class SetRequestConfirmationsCall extends ethereum.Call {
  get inputs(): SetRequestConfirmationsCall__Inputs {
    return new SetRequestConfirmationsCall__Inputs(this);
  }

  get outputs(): SetRequestConfirmationsCall__Outputs {
    return new SetRequestConfirmationsCall__Outputs(this);
  }
}

export class SetRequestConfirmationsCall__Inputs {
  _call: SetRequestConfirmationsCall;

  constructor(call: SetRequestConfirmationsCall) {
    this._call = call;
  }

  get _reqConf(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetRequestConfirmationsCall__Outputs {
  _call: SetRequestConfirmationsCall;

  constructor(call: SetRequestConfirmationsCall) {
    this._call = call;
  }
}

export class SetSubscriptionIdCall extends ethereum.Call {
  get inputs(): SetSubscriptionIdCall__Inputs {
    return new SetSubscriptionIdCall__Inputs(this);
  }

  get outputs(): SetSubscriptionIdCall__Outputs {
    return new SetSubscriptionIdCall__Outputs(this);
  }
}

export class SetSubscriptionIdCall__Inputs {
  _call: SetSubscriptionIdCall;

  constructor(call: SetSubscriptionIdCall) {
    this._call = call;
  }

  get _subID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubscriptionIdCall__Outputs {
  _call: SetSubscriptionIdCall;

  constructor(call: SetSubscriptionIdCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
